class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i=0; i<nums.length; i++){
            if(nums[i] == nums[i+1]){
                return nums[i];
            }
        }
        return -1;
    /*
        for(int i=0; i<nums.length; i++){
            for(int j=0; j<nums.length; j++){
                if(i!=j && nums[i] == nums[j]){
                    return nums[i];
                }
            }
        }
        return -1;
    */

    /*
        int len = nums.length;
        int[] count = new int[len + 1];
        for (int i = 0; i < len; i++) {
            count[nums[i]]++;
            if (count[nums[i]] > 1) {
                return nums[i];
            }
        }

        return -1;
    */

    /*
        HashSet<Integer> set = new HashSet<>();
        for(int i=0; i<nums.length; i++){
            if(!set.add(nums[i])){
                return nums[i];
            }
        }
        return -1;
    */
    
    /*
        int slow = nums[0];
        int fast = nums[0];
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while (slow != fast);
        fast = nums[0];
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    */
    
    }
}
