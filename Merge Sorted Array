class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
    /*    int  i = m;
        for (int j = 0; j < n; j++) {
            nums1[i] = nums2[j];
            i++;
        }
        Arrays.sort(nums1);
    */

  
        int i = m - 1;
        int j = n - 1;
        int k = m + n - 1;
        
        while (j >= 0) {
            if (i >= 0 && nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }


//    public static void swapIfGreater(int[] nums1, int[] nums2, int ind1, int ind2) {
//         if (nums1[ind1] > nums2[ind2]) {
//             int temp = nums1[ind1];
//             nums1[ind1] = nums2[ind2];
//             nums2[ind2] = temp;
//         }
//     }
//     int length = m + n;
//     int gap = (length / 2) + (length % 2);
//     while(gap > 0){
//         int left = 0;
//         int right = left + gap;
//         while(right < length){
//             //case 1: left in nums1[] and right in nums2[]
//             if(left < m && right >=m){
//                 // if(nums1[left] > nums2[right]){
//                 //     int temp = nums1[left];
//                 //     nums1[left] = nums2[right - m];
//                 //     nums2[right - m] = temp;
//                 // }
//                 swapIfGreater(arr1, arr2, left, right - m);
//             }
//             //case 2: both pointers in arr2[];
//             if(left >= m){
//                 // if(nums2[left] > nums2[right]){
//                 //     int temp = nums2[left - m];
//                 //     nums2[left - m] = nums2[right - m];
//                 //     nums2[right - m] = temp;
//                 // }
//                 swapIfGreater(arr2, arr2, left - m, right - m);
//             }
//             //case 3: both pointers in arr1[];
//             else{
//                 // int temp = nums1[left];
//                 // nums1[left] = nums1[right];
//                 // nums1[right] = temp;
//                 swapIfGreater(arr1, arr1, left, right);
//             }
//             left++;
//             right++;
//         }
//         if(gap == 1){
//             break;
//         }
//         gap = (gap / 2) + (gap % 2);
//     }

    }
}
